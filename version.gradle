buildscript {
    def mcVersionStr = project.name.tokenize("-")[0]
    def (major, minor, patch) = mcVersionStr.tokenize(".")
    def base = major == null || minor == null
    def mcVersion = base ? 11800 : "${major}${minor.padLeft(2, "0")}${(patch ?: "").padLeft(2, "0")}" as int
    def fabric = mcVersion >= 11400
    project.ext.mcVersion = mcVersion
    project.ext.mcVersionStr = mcVersionStr
    project.ext.mcPlatform = fabric ? "fabric" : "forge"
    project.ext.fabric = fabric
    project.ext.forge = !fabric

    repositories {
        gradlePluginPortal()
        mavenLocal()
        maven { url("https://jitpack.io/") }
        maven { url("https://maven.architectury.dev/") }
        maven { url("https://maven.fabricmc.net") }
        maven { url("https://maven.minecraftforge.net") }
        maven { url("https://repo.sk1er.club/repository/maven-public/") }
    }

    dependencies {
        classpath("gg.essential:architectury-loom:0.10.0.2")
        if (!fabric) classpath("dev.architectury.architectury-pack200:dev.architectury.architectury-pack200.gradle.plugin:0.1.3")
        classpath("com.github.replaymod:preprocessor:7746c47")
        classpath("xyz.unifycraft.gradle.unisigning:unisigning:1.0.0")
        classpath("xyz.unifycraft.gradle.loomshadow:loomshadow:1.0.0")
        classpath("xyz.unifycraft.gradle.unibuild:unibuild:1.0.0")
    }
}

def FABRIC = fabric
def FORGE = !FABRIC

if (FORGE) {
    apply plugin: "dev.architectury.architectury-pack200"
    ext.set("loom.platform", "forge")
}
apply plugin: "gg.essential.loom"

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "xyz.unifycraft.gradle.loomshadow"

apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "com.replaymod.preprocess"
apply plugin: "net.kyori.blossom"
apply plugin: "maven-publish"
apply plugin: "java"
apply plugin: "idea"

archivesBaseName = projectName
version = projectVersion
group = "${projectGroup}.api"
apply plugin: "xyz.unifycraft.gradle.unibuild"

apply plugin: "xyz.unifycraft.unisigning"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

compileKotlin.kotlinOptions.freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"

loom {
    if (FORGE) {
        forge {
            pack200Provider = new dev.architectury.pack200.java.Pack200Adapter()
        }
    }
}

unibuild {
    mcVersion = project.ext.mcVersionStr
    mcPlatform = project.ext.mcPlatform
}

blossom {
    replaceToken("__VERSION__", project.version)
}

dependencies {
    // Minecraft, Forge and Mixin.
    minecraft("com.mojang:minecraft:" + [
            11802: "1.18.2",
            10809: "1.8.9"
    ][mcVersion])
    mappings([
            11802: "1.18.2+build.1",
            10809: "de.oceanlabs.mcp:mcp_stable:22-1.8.9"
    ][mcVersion])
    if (FORGE) forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")
    loomShade("org.spongepowered:mixin:" + [
            11802: "0.8.5-SNAPSHOT",
            11202: "0.7.11-SNAPSHOT",
            10809: "0.7.11-SNAPSHOT"
    ][mcVersion])

    // Kotlin language.
    loomShade("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0-native-mt")
    loomShade("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Internal libraries, also serve as convenience for other mods.
    loomShade("org.kodein.di:kodein-di:7.10.0")
    loomShade(api("com.github.KevinPriv:keventbus:master-SNAPSHOT"))
    loomShade("xyz.deftu.deftils:Deftils:1.2.2")
    loomShade("com.github.ben-manes.caffeine:caffeine:2.9.3")
    loomShade(api("org.java-websocket:Java-WebSocket:1.5.2"))
    loomShade(api("xyz.deftu.quicksocket:QuickSocket:1.2.2"))
    loomShade(api("com.squareup.okhttp3:okhttp:4.9.3"))
    loomShade(api("xyz.unifycraft.confide:Confide-${mcVersionStr}-${mcPlatform}:1.0.0")) {
        exclude(module: "kotlin-stdlib-jdk8")
        exclude(module: "kotlin-reflect")
        exclude(module: "elementa-$mcVersionStr-$mcPlatform")
    }
    loomShade(api("gg.essential:universalcraft-$mcVersionStr-$mcPlatform:181")) {
        exclude(module: "kotlin-stdlib-jdk8")
    }
    loomShade(api("gg.essential:elementa-$mcVersionStr-$mcPlatform:441")) {
        exclude(module: "kotlin-stdlib-jdk8")
        exclude(module: "kotlin-reflect")
        exclude(module: "universalcraft-$mcVersionStr-$mcPlatform")
    }

    // Convenience.
    loomShade("me.nullicorn:Nedit:2.1.1")
    loomShade("net.hypixel:hypixel-api-transport-reactor:4.2") {
        exclude(module: "gson")
    }
}

processResources {
    inputs.property("name", projectName)
    inputs.property("id", projectId)
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand(
                "name": projectName,
                "id": projectId,
                "version": project.version
        )
    }

    filesMatching("mcmod.info") {
        expand(
                "id": projectId,
                "name": projectName,
                "version": project.version,
                "mcversion": minecraft.version
        )
    }

    rename("(.+_at.cfg)", "META-INF/\$1")
}

loomShadowJar {
    exclude("LICENSE.md")
    exclude("pack.mcmeta")
    exclude("dummyThing")
    exclude("**/module-info.class")
    exclude("*.so")
    exclude("*.dylib")
    exclude("*.dll")
    exclude("*.jnilib")
    exclude("ibxm/**")
    exclude("com/jcraft/**")
    exclude("org/lwjgl/**")
    exclude("net/java/**")

    exclude("META-INF/proguard/**")
    exclude("META-INF/maven/**")
    exclude("META-INF/versions/**")
    exclude("META-INF/com.android.tools/**")

    exclude("**/*.kotlin_metadata")
    exclude("**/*.kotlin_builtins")
}

java {
    withJavadocJar()
}

afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName.toLowerCase()
                group = projectGroup
                version = project.version

                artifact(loomShadowJar) {
                    builtBy(loomShadowJar)
                }
                artifact(javadocJar) {
                    builtBy(javadocJar)
                }
            }
        }
    }
}

classes.dependsOn(processResources)
loomShadowJar.dependsOn(applyBuildInfo)